import{createFragment as t}from"../utils/dom.js";import{getFlattenedFocusableItems as s}from"../utils/traversal.js";import{getHostElementToFocus as o}from"./utils/first-focus.controller.utils.js";class i{constructor(t,s={start:"start",end:"end"}){this.host=t,this.config=s,this.host.addController(this)}get focusableItems(){return s(this.root).filter((t=>!t.hasAttribute("cds-focus-boundary")&&(this.root.contains(t)||t.closest("[cds-focus-trap]")===this.host)))}get root(){return this.host.shadowRoot?this.host.shadowRoot:this.host}async hostConnected(){await this.host.updateComplete;const s=t=>`<div cds-focus-boundary tabindex="0" style="display:none;position:absolute;width:1px;height:1px;clip:rect(0,0,0,0)">${t}</div>`;0===Array.from(this.root.querySelectorAll("[cds-focus-boundary]")).length&&(this.root.appendChild(t("<style>:host(:host:focus-within) [cds-focus-boundary],:host(:focus-within) [cds-focus-boundary] {display: block !important}</style>")),this.root.prepend(t(s(this.config.start))),this.root.appendChild(t(s(this.config.end))),this.host.setAttribute("cds-focus-trap",""));const[i,e]=Array.from(this.root.querySelectorAll("[cds-focus-boundary]"));i.addEventListener("focusin",(()=>(this.focusableItems.length>0?this.focusableItems[this.focusableItems.length-1]:o(this.host)).focus())),e.addEventListener("focusin",(()=>(this.focusableItems.length>0?this.focusableItems[0]:o(this.host)).focus()))}}export{i as InlineFocusTrapController};
//# sourceMappingURL=inline-focus-trap.controller.js.map
