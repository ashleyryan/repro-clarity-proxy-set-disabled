import{__decorate as e}from"tslib";import{FocusTrapTrackerService as t,CdsBaseFocusTrap as o,I18nService as r,createId as s,setAttributes as i,baseStyles as a,property as c,i18n as l,event as d,state as n,animate as p,reverseAnimation as u,AnimationModalEnterName as h}from"@cds/core/internal";import{html as v}from"lit";import{query as y}from"lit/decorators/query.js";import f from"./overlay.element.scss.js";import b from"./shared.element.scss.js";function k(e,t,o,r){const s=o.filter((e=>e.indexOf(t)>-1));return!0===r&&o.indexOf(e)<0||s.indexOf(e)>0}function m(e,o=t){var r;return(null===(r=o.getCurrent())||void 0===r?void 0:r.focusTrapId)===e}class g extends o{constructor(){super(),this.closable=!1,this.ignoreFocusTrap=!1,this.i18n=r.keys.overlay,this.overlayIdPrefix="_overlay-",this.isLayered=!1,this.fireEventOnBackdropClick=()=>{m(this.focusTrapId)&&this.closeOverlay("backdrop-click")},this.focusTrapId=s(this.overlayIdPrefix)}get customBumpers(){return[]}static get shadowRootOptions(){return{...super.shadowRootOptions,delegatesFocus:!0}}getFocusTrapId(){return this.focusTrapId}connectedCallback(){super.connectedCallback(),this.ariaModal="true"}firstUpdated(e){super.firstUpdated(e),this.backdrop.addEventListener("click",this.fireEventOnBackdropClick)}updated(e){super.updated(e);const o=this.isLayered,r=k(this.focusTrapId,this.overlayIdPrefix,t.getTrapElements().map((e=>e.focusTrapId)),o);o!==r&&(this.isLayered=r,this.requestUpdate("isLayered",o)),this.setAriaRole()}disconnectedCallback(){super.disconnectedCallback(),this.backdrop.removeEventListener("click",this.fireEventOnBackdropClick)}setAriaRole(){var e;const o=(null===(e=t.getCurrent())||void 0===e?void 0:e.focusTrapId)===this.focusTrapId?"dialog":"region";i(this,["role",o])}get closeButtonAttrs(){return[["cds-layout","align:top"],["aria-label",this.i18n.closeButtonAriaLabel],["icon-size","24"]]}closeOverlay(e="custom"){this.closableController.close(e)}get closeButtonTemplate(){return v`<cds-internal-close-button cds-layout="align:top" aria-label="${this.i18n.closeButtonAriaLabel}" icon-size="24" @click="${()=>this.closeOverlay("close-button-click")}"></cds-internal-close-button>`}get backdropTemplate(){return v`<div class="${this.isLayered?"overlay-backdrop layered":"overlay-backdrop"}" aria-hidden="true"></div>`}render(){return v`${this.backdropTemplate}<div class="private-host" tabindex="-1"><slot></slot></div>`}static get styles(){return[a,f,b]}}e([c({type:Boolean})],g.prototype,"closable",void 0),e([c({type:Boolean,attribute:"cds-ignore-focus-trap"})],g.prototype,"ignoreFocusTrap",void 0),e([l()],g.prototype,"i18n",void 0),e([d()],g.prototype,"closeChange",void 0),e([n({type:Boolean})],g.prototype,"isLayered",void 0),e([n({type:String})],g.prototype,"focusTrapId",void 0),e([y(".overlay-backdrop")],g.prototype,"backdrop",void 0);let T=class extends g{constructor(){super(...arguments),this.cdsMotion="on"}};e([c({type:String})],T.prototype,"cdsMotion",void 0),e([d()],T.prototype,"cdsMotionChange",void 0),T=e([p({hidden:{true:u(h),false:h}})],T);export{T as CdsInternalOverlay,g as CdsInternalStaticOverlay,k as isNestedOverlay,m as overlayIsActive};
//# sourceMappingURL=overlay.element.js.map
